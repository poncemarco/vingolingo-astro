<div class="text-gray-900 flex-row justify-center cursor-pointer hover:bg-gray-600 focus:ring-4 focus:outline-none focus:ring-[#1da1f2]/50 font-medium rounded-lg px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-[#1da1f2]/55 mr-2 mb-2 hover:shadow-lg transition-all duration-200 ease-in-out hover:scale-110 hover:text-white scale-90 gap-x-2 opacity-90 hover:opacity-100 dark:dark:text-gray-100 relative">
    <svg 
        class="w-4 h-4 text-gray-500 dark:text-gray-400" 
        aria-hidden="true" 
        xmlns="http://www.w3.org/2000/svg" 
        fill="none" 
        viewBox="0 0 20 20"
    >
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
    </svg>
    <input 
        type="search" 
        id="search" 
        class="p-4 ps-10 text-sm text-gray-600 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
        placeholder="Busca por producto, categoria o marca" 
        aria-label="Search"
        required
    >
    <div id="resultsContainer" class="absolute top-12 left-0 z-10 w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg max-h-96 overflow-y-auto hidden"> <!-- Agregado hidden aquí -->
        <p id="searchReadout" class="dark:text-white my-2 px-4"></p>
        <ul id="searchResults" class="dark:bg-gray-800 dark:text-white">
        </ul>
    </div>
</div>

<script>
    import DOMPurify from 'dompurify';
    import Fuse, { type IFuseOptions } from 'fuse.js'; // Importar Fuse y IFuseOptions
    import { generateSearchList } from '@/components/utils/SearchList';
    import { SPINNER } from '@/components/ui/loaders/spinner.ts';
    import type { Datum } from '@/types/items';
    import type { Category } from '@/types/categories';

    document.addEventListener('astro:page-load', () => {
        // Elementos del DOM
        const searchInput = document.getElementById('search') as HTMLInputElement;
        const searchReadout = document.getElementById('searchReadout') as HTMLParagraphElement;
        const resultsList = document.getElementById('searchResults') as HTMLUListElement;
        const resultsContainer = document.getElementById('resultsContainer') as HTMLDivElement;

        // Variables
        let SEARCH_DATA: Datum[];
        let SEARCH_CATEGORY_DATA: Category[];
        let FUSE_INSTANCE: Fuse<Datum>; // Usar Fuse<Datum> para tipar la instancia
        let FUSE_CATEGORY_INSTANCE: Fuse<Category>; // Usar Fuse<Category> para tipar la instancia

        // Opciones de Fuse.js
        const FUSE_OPTIONS: IFuseOptions<Datum> = { // Usar IFuseOptions<Datum>
            includeScore: true,
            shouldSort: true,
            keys: [
                { name: 'name', weight: 0.7 },
                { name: 'category', weight: 0.5 },
                { name: 'unit', weight: 0.3 },
            ],
            threshold: 0.5,
        };

        const FUSE_CATEGORY_OPTIONS: IFuseOptions<Category> = { // Usar IFuseOptions<Category>
            includeScore: true,
            shouldSort: true,
            keys: [{ name: 'name', weight: 0.5 }],
            threshold: 0.5,
        };

        // Funciones
        function updateSearchPageURL(search: string): void {
            const url = new URL(window.location.href);
            url.searchParams.set('q', search);
            window.history.replaceState(null, '', url.toString());
        }

        async function fetchSearchResults(search: string): Promise<void> {
            if (search.length === 0) {
                resultsList.innerHTML = '';
                searchReadout.textContent = '';
                resultsContainer.classList.add('hidden');
                return;
            }

            resultsList.innerHTML = SPINNER;
            resultsContainer.classList.remove('hidden');

            if (!SEARCH_DATA) {
                try {
                    const res = await fetch('/items.json');
                    if (!res.ok) {
                        throw new Error('Something went wrong…please try again');
                    }
                    const data = await res.json();
                    SEARCH_DATA = data.items as Datum[];
                    SEARCH_CATEGORY_DATA = data.categories as Category[];
                } catch (e) {
                    console.error(e);
                }
            }

            if (SEARCH_DATA && !FUSE_INSTANCE) {
                FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
                FUSE_CATEGORY_INSTANCE = new Fuse(SEARCH_CATEGORY_DATA, FUSE_CATEGORY_OPTIONS);
            }

            if (!FUSE_INSTANCE) return;

            const searchResult = FUSE_INSTANCE.search(search);
            const categoryResult = FUSE_CATEGORY_INSTANCE.search(search);
            const items = searchResult.map((result) => result.item);
            const categories = categoryResult.map((result) => result.item);

            const results = {
                items: items as Datum[],
                categories: categories as Category[],
            };

            resultsList.innerHTML =
                searchResult.length > 0
                    ? generateSearchList(results)
                    : "<li class='text-center text-gray-500 dark:text-gray-400'>No se encontraron resultados</li>";
        }

        function updateDocumentTitle(search: string): void {
            document.title = search ? `Resultados de búsqueda para: ${search}` : 'Búsqueda de productos';
        }

        function updateSearchReadout(search: string): void {
            searchReadout.textContent = search
                ? `Resultados de búsqueda para: ${search}`
                : 'Busca productos';
        }

        function setLocalSearchData(search: string): boolean {
            const actualLocalSearch = localStorage.getItem('search');
            if (actualLocalSearch !== search) {
                localStorage.setItem('search', search);
                return true;
            }
            return false;
        }

        // Inicialización
        const storedSearch = localStorage.getItem('search');
        searchInput.placeholder =
            storedSearch && storedSearch !== '' ? storedSearch : 'Busca por producto, categoría o marca';
        searchReadout.textContent = storedSearch
            ? `Resultados de búsqueda para: ${storedSearch}`
            : '';

        // Eventos
        window.addEventListener('DOMContentLoaded', () => {
            const urlParams = DOMPurify.sanitize(
                new URLSearchParams(window.location.search).get('q') as string
            );
            updateDocumentTitle(urlParams);
            updateSearchReadout(urlParams);
            searchInput.value = urlParams ?? '';
        });

        searchInput.addEventListener('focus', () => {
            const actualLocalSearch = localStorage.getItem('search');
            if (actualLocalSearch) {
                searchInput.value = actualLocalSearch;
                const searchTerm = DOMPurify.sanitize(searchInput.value);
                updateDocumentTitle(searchTerm);
                updateSearchReadout(searchTerm);
                fetchSearchResults(searchTerm);
                updateSearchPageURL(searchTerm);
            }
        });

        searchInput.addEventListener('input', () => {
            const searchInputValue = DOMPurify.sanitize(searchInput.value);
            const update = setLocalSearchData(searchInputValue);

            if (searchInputValue.length === 0) {
                searchInput.placeholder = 'Busca por producto, categoría o marca';
                searchReadout.textContent = 'Busca productos';
                resultsList.innerHTML = '';
                resultsContainer.classList.add('hidden');
                localStorage.removeItem('search');
                return;
            }

            resultsContainer.classList.remove('hidden');
            if (!update) return;

            const searchTerm = searchInputValue;
            updateDocumentTitle(searchTerm);
            updateSearchReadout(searchTerm);
            fetchSearchResults(searchTerm);
            updateSearchPageURL(searchTerm);
        });
    });
</script>
