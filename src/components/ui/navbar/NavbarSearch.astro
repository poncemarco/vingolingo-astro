
<div class="text-gray-900 flex-row justify-center cursor-pointer hover:bg-gray-600 focus:ring-4 focus:outline-none focus:ring-[#1da1f2]/50 font-medium rounded-lg px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-[#1da1f2]/55 mr-2 mb-2 hover:shadow-lg transition-all duration-200 ease-in-out hover:scale-110 hover:text-white scale-90 gap-x-2 opacity-90 hover:opacity-100 dark:dark:text-gray-100">
    <svg 
        class="w-4 h-4 text-gray-500 dark:text-gray-400" 
        aria-hidden="true" 
        xmlns="http://www.w3.org/2000/svg" 
        fill="none" 
        viewBox="0 0 20 20"
    >
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
    </svg>
    <input 
            type="search" 
            id="search" 
            class="p-4 ps-10 text-sm text-gray-600 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" 
            placeholder="Busca por producto, categoria o marca" 
            aria-label="Search"
            required
    >
    <div>
        <p id="searchReadout" class="dark:text-white my-2"></p>
        <section>
            <ul id="searchResults" class="dark:bg-gray-800 dark:text-white"></ul>
        </section>
    </div>
</div>

<script>
    import DOMPurify from 'dompurify';
    import Fuse from 'fuse.js';
    import { generateSearchList } from '@/components/utils/SearchList';
    import { SPINNER } from '@/components/ui/loaders/spinner.ts';
    import type { Datum } from '@/types/items';
    import type { Category } from '@/types/categories';


    document.addEventListener('astro:page-load', () => {
            const searchInput = document.getElementById('search');
        //variables 
        let SEARCH_DATA: Datum[];
        let SEARCH_CATEGORY_DATA: Category[];
        let FUSE_INSTANCE: any; 
        let FUSE_CATEGORY_INSTANCE: any; 
        let FUSE_OPTIONS = {
            includeScore: true,
            shouldSort: true, 
            keys: [ 
                {
                    name: 'name',
                    weight: 0.7,
                },
                {
                    name: 'category',
                    weight: 0.5,
                },
                {
                    name: 'unit',
                    weight: 0.3,
                }],
            threshold: 0.5,
        };
        let FUSE_CATEGORY_OPTIONS = {
            includeScore: true,
            shouldSort: true, 
            keys: [ 
                {
                    name: 'name',
                    weight: 0.5,
                }],
            threshold: 0.5,
        };
        const search = document.querySelector('#search') as HTMLInputElement;
        const searchReadout = document.querySelector('#searchReadout') as HTMLInputElement;
        const resultsList = document.querySelector('#searchResults') as HTMLElement; 

        // functions 
        function updateSearchPageURL(search: string) {
            const url = new URL(window.location.href);
            url.searchParams.set('q', search);
            window.history.replaceState(null, "", url);
        }

        async function fetchSearchResults(search: string) {
            if (search.length === 0) {
                resultsList.innerHTML = "";
                searchReadout.innerHTML = "";
                return;
            }
            resultsList.innerHTML = SPINNER;
            if (!SEARCH_DATA) {
                try {
                    const res = await fetch("/items.json");
                    if (!res.ok) {
                        throw new Error("Something went wrong…please try again");
                    }
                    const data = await res.json();
                    SEARCH_DATA = data.items as Datum[];
                    SEARCH_CATEGORY_DATA = data.categories as Category[];
                } catch (e) {
                    console.error(e);
                }
            }
            if (SEARCH_DATA && !FUSE_INSTANCE) {
                FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
                FUSE_CATEGORY_INSTANCE = new Fuse(SEARCH_CATEGORY_DATA, FUSE_CATEGORY_OPTIONS);
            }
            if (!FUSE_INSTANCE) return;
            console.log("search", search);
            const searchResult = FUSE_INSTANCE.search(search);
            const categoryResult = FUSE_CATEGORY_INSTANCE.search(search);
            console.log("searchResult", searchResult);
            const items = searchResult.map((result : any) => result.item);
            const categories = categoryResult.map((result : any) => result.item);
            const results = {
                items: items as Datum[],
                categories: categories as Category[],
            }
            console.log("results", results);
            resultsList.innerHTML =
                searchResult.length > 0
                ? generateSearchList(results)
                : "<li class='text-center text-gray-500 dark:text-gray-400'>No se encontraron resultados</li>";
        }
        function updateDocumentTitle(search: any) {
            document.title = search ? `Resultados de búsqueda para: ${search}` : 'Búsqueda de productos';
        }
        function updateSearchReadout(search : URLSearchParams | any) {
            console.log(search);
            searchReadout.textContent = search
            ? `Resultados de búsqueda para: ${search}`
            : 'Busca productos';
        }
        function setLocalSearchData(search: string) {
            const actualLocalSearch = localStorage.getItem('search');
            console.log(actualLocalSearch);
            if (actualLocalSearch !== search) {
                localStorage.setItem('search', search);
                return true;
            }
            return false;
        }
        // init

        const storedSearch = localStorage.getItem('search');
        search.placeholder = (storedSearch !== null && storedSearch !== '') ? storedSearch : 'Busca por producto, categoría o marca';
        if (search.placeholder === '') {
            search.placeholder = 'Busca por producto, categoria o marca';
        }
        searchReadout.textContent = localStorage.getItem('search') ? `Resultados de búsqueda para: ${localStorage.getItem('search')}` : '';
        console.log(searchReadout.textContent);
        //listeners

        window.addEventListener("DOMContentLoaded", () => {
            const urlParams = DOMPurify.sanitize (
                new URLSearchParams(window.location.search).get('q') as string
            ) ;
            updateDocumentTitle(urlParams);
            updateSearchReadout(urlParams);
            search.value = urlParams ?? '';
        });

        search.addEventListener("focus", () => {
            const actualLocalSearch = localStorage.getItem('search');
            if (actualLocalSearch) {
                search.value = actualLocalSearch;
                const searchTerm = DOMPurify.sanitize(search.value);
                updateDocumentTitle(searchTerm);
                updateSearchReadout(searchTerm);
                fetchSearchResults(searchTerm);
                updateSearchPageURL(searchTerm);
            }
        });
        search.addEventListener("input", () => {
            const searchInput = DOMPurify.sanitize(search.value);
            console.log(searchInput);
            const update = setLocalSearchData(searchInput);
            if (!update) return;
            const searchTerm = searchInput;
            if (searchTerm.length === 0) {
                resultsList.innerHTML = "";
                searchReadout.innerHTML = "";
                return;
            }
            console.log("searchTerm",searchTerm);
            updateDocumentTitle(searchTerm);
            updateSearchReadout(searchTerm);
            fetchSearchResults(searchTerm);
            updateSearchPageURL(searchTerm);
            search.placeholder = (storedSearch !== null && storedSearch !== '') ? storedSearch : 'Busca por producto, categoría o marca'; 
        });
    });
</script>
